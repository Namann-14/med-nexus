const express = require("express");
const { GoogleGenerativeAI } = require("@google/generative-ai")

const router = express.Router();

// * Access the API key and initialize the Gemini SDK.
const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);

// * Initializing the Gemini Model
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

/**
 * Handles POST requests for normal chat, sending chat and history to Gemini and returning the full response.
 *
 * Request:
 *   chat: string,
 *   history: Array
 *
 * Returns a JSON payload containing the model response
 * Response:
 * 	text: string
 */
router.post("/chat", async (req, res) => {
  /** Read the request data. */
  const chatHistory = req.body.history || [];
  const msg = req.body.chat;

  /** Initialize the chat with the given history. */
  const chat = model.startChat({
    history: chatHistory,
  });

  /**
   * Send the message posted by the user to the Gemini model and read the
   * response generated by the model.
   */
  const result = await chat.sendMessage(msg);
  const response = await result.response;
  const text = response.text();

  /** Send the response returned by the model as the API's response. */
  res.send({ text: text });
});

/**
 * POST method route for streaming response.
 * A chat message and the history of the conversation are send to the Gemini
 * model. The response generated by the model will be streamed to handle
 * partial results.
 *
 * Expects a JSON payload in the request with the following format:
 * Request:
 *   chat: string,
 *   history: Array
 *
 * Returns a partial result of the model response with the
 * following format:
 * Response:
 * 	<string>
 */
router.post("/stream", async (req, res) => {
  /** Read the request data. */
  const chatHistory = req.body.history || [];
  const msg = req.body.chat;

  /** Initialize the chat with history. */
  const chat = model.startChat({
    history: chatHistory,
  });

  /**
   * Send a new user message and read the response.
   * Send the chunk of text result back to the client
   * as soon as you receive it.
   */
  const result = await chat.sendMessageStream(msg);
  for await (const chunk of result.stream) {
    const chunkText = chunk.text();
    res.write(chunkText);
  }
  res.end();
});

module.exports = router;
